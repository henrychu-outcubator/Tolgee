ext {
    dockerPath = buildDir.absolutePath + "/docker"
}

task dockerPrepare {
    doLast {
        copy {
            from(tasks.unpack.outputs, 'docker/app')
            into(dockerPath)
        }

        copy {
            from("${projectDir.absolutePath}/docker/app")
            into(dockerPath)
        }
    }
    dependsOn("unpack", "copyDist", "copyDockerIgnore", "addVersionFile")
}

task docker {
    doLast {
        exec {
            workingDir dockerPath
            commandLine "docker", "build", ".", "-t", "tolgee/tolgee", "--cache-from", "type=registry,ref=tolgee/tolgee:latest"
        }
    }
    dependsOn("dockerPrepare")
}

void createDockerBuildxTask(String taskName, boolean isPush) {
    task(taskName) {
        doLast {
            if (project.hasProperty('dockerImageTag')) {
                def commandParams = ["docker", "buildx", "build", ".", "-t", project.property('dockerImageTag'), "--platform", "linux/arm64,linux/amd64"]
                if (isPush) {
                    commandParams += ["--push"]
                }
                exec {
                    workingDir dockerPath
                    commandLine commandParams
                }
            } else {
                throw new GradleException('A "dockerImageTag" project property must be defined! e.g. ./gradlew dockerBuildx -PdockerImageTag=myImageTag');
            }
        }
        dependsOn("dockerPrepare")
    }
}

createDockerBuildxTask("dockerBuildxPush", true)
createDockerBuildxTask("dockerBuildx", false)

task cleanDocker{
    delete(dockerPath)
}

if (tasks.findByName("wrapper") == null) {
    task wrapper(type: Wrapper) {
    }
}

task copyDockerIgnore(type: Copy) {
    from "docker/app/.dockerignore"
    into "build/docker"
}
